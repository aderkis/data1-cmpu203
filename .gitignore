interface FiniteSet {

    String toString();
    
    int cardinality();
    //returns the number of elements in t
    
    boolean isBranch();
    //determines if t is non-empty
    
    boolean isEmptyHuh();
    //determines if t is empty
    
    boolean member(int elt);
    //determines if elt is in t
    
    FiniteSet add(int elt);
    //returns a set containing elt and everything in t
    
    FiniteSet remove(int elt);
    //returns a set containing everything in t except elt
    
    FiniteSet union(FiniteSet u);
    //returns a set containing everything in t and u
    
    FiniteSet inter(FiniteSet u);
    //returns a set containing everything that is in both t and u
    
    FiniteSet diff(FiniteSet u);
    //returns a set containing everything in u except those in t
    
    boolean equal(FiniteSet u);
    //determines if t and u have exactly the same elements
    
    boolean subset(FiniteSet u);
    //determines if t is a subset of u
}

class Branch implements FiniteSet {
    FiniteSet left;
    int key;
    FiniteSet right;
    
    Branch (FiniteSet left, int key, FiniteSet right) {
        this.left = left;
        this.key = key;
        this.right = right;
    }
    
    public String toString() {
        return this.key + "," + this.left.toString() + this.right.toString();
    }
    
    public boolean isBranch() {
        return true;
    }
    
    public int cardinality() {
        return 1 + this.left.cardinality() + this.right.cardinality();
    }
    
    public boolean isEmptyHuh() {
        return false;
    }
    
    public boolean member(int elt) {
        if (elt == this.key) {
            return true;
        } else if (elt < this.key) {
            return this.left.member(elt);
        } else {
            return this.right.member(elt);
    }
    
    public FiniteSet add(int elt) {
        if (elt == this.key) {
            return this;
        } else if (elt < this.key) {
            return new Branch(this.left.add(elt), this.key, this.right);
        } else {
            return new Branch(this.left, this.key, this.right.add(elt));
        }
    }
    
    public FiniteSet remove(int elt) {
        if (elt < this.key) {
            return new Branch(this.left.remove(elt),this.key, this.right);
        } else if (elt > this.key) {
            return new Branch(this.left, this.key, this.right.remove(elt));
        } else {
            return this.left.union(this.right);
        }
    }
    
    public FiniteSet union(FiniteSet u) {
        return u.union(this.left).union(this.right).add(this.key);
    }
    
    public FiniteSet inter(FiniteSet u) {
        if(u.member(this.key)) {
            return new Branch(this.left.inter(u), this.key, this.right.inter(u));
        } else {
            return this.left.union(this.right).inter(u);
        }
    }
    
    public FiniteSet diff(FiniteSet u) {
        return this.left.union(this.right).diff(u.remove(this.key));
    }
    
    public boolean equal(FiniteSet u) {
        return this.subset(u) && u.subset(this);
    }
    
    public boolean subset(FiniteSet u) {
        return u.member(this.key) && this.left.subset(u) && this.right.subset(u);
    }
}

class Empty implements FiniteSet {
    
    Empty() {};
    
    public static FiniteSet empty() {
    	return new Empty();
    }
    
    public String toString() {
        return "";
    }
    
    public int cardinality() {
        return 0;
    }
    
    public boolean isBranch() {
        return false;
    }
    
    public boolean isEmptyHuh() {
        return true;
    }
    
    public boolean member(int elt) {
        return false;
    }
    
    public FiniteSet add(int elt) {
        FiniteSet bot = new Empty();
        FiniteSet addElt = new Branch(bot, elt, bot);
        return addElt;
    }
    
    public FiniteSet remove(int elt) {
        return new Empty();
    }
    
    public FiniteSet union(FiniteSet u) {
        return u;
    }
    
    public FiniteSet inter(FiniteSet u) {
        return this;
    }
    
    public FiniteSet diff(FiniteSet u) {
        return u;
    }
    
    public boolean equal(FiniteSet u) {
        return u.isEmptyHuh();
    }
    
    public boolean subset(FiniteSet u) {
        return true;
    }
}

public class Tests {
    
    //Properties
    
    //cardinality (union u t) = cardinality (t) + cardinality (u) - cardinality (inter u t)
    public static boolean unionTest(FiniteSet t, FiniteSet u) {
	return t.union(u).cardinality() == t.cardinality() + u.cardinality() - t.inter(u).cardinality();
    }
    
    //union (difference t u) (intersection t u) = t
    public static boolean diffTest(FiniteSet t, FiniteSet u) {
        return t.diff(u).union(u.inter(t)).equal(u);
    }
   
    //member (add t x) y = true <-> x = y \/ member t y = true
    public static boolean addMemberTest(FiniteSet t, int x, int y) {
	return t.add(x).member(y) == (x == y || t.member(y));
    } 

    //member (union s s') x = true <-> member s x = true \/ member s' x = true
    public static boolean unionMemberTest(FiniteSet t, FiniteSet u, int x) {
	return t.union(u).member(x) == (t.member(x) || u.member(x));
    }
    
    //member (inter s s') x = true <-> member s x = true /\ member s' x = true
    public static boolean interMemberTest(FiniteSet t, FiniteSet u, int x) {
	return t.inter(u).member(x) == (t.member(x) && u.member(x));
    }
    
    public static boolean removeTest(BST t, int x) {
        return t.subset(t.remove(x));
    }
    
    public static FiniteSet randomFiniteSet(int num) {
        FiniteSet set = new Empty();
        for(; num > 0; num--) {
            set = set.add((int) (Math.random() * 100));
        }
        return set;
    }

    public static void main(String[] args) {
        
        FiniteSet bot = new Empty();
        FiniteSet t1 = new Branch(bot, 1, bot);
        FiniteSet t3 = new Branch(bot, 3, bot);
        FiniteSet t2 = new Branch(t1, 2, t3);
        FiniteSet t5 = new Branch(bot, 5, bot);
        FiniteSet t7 = new Branch(bot, 7, bot);
        FiniteSet t6 = new Branch(t5, 6, t7);
        FiniteSet t4 = new Branch(t2, 4, t6);
        
        FiniteSet a = bot.add(1).add(2).add(3);
        FiniteSet b = bot.add(4).add(5).add(6);
        FiniteSet c = bot.add(7).add(8).add(9);
        
        System.out.println("t4: " + t4);
        System.out.println("a: " + a);
        System.out.println("b: " + b);
        System.out.println("c: " + c);
        System.out.println("a should be a subset of t4, and should return true. Returns " + a.subset(t4));
        System.out.println("The union of a, b and c should have a cardinality of 9. It is " + a.union(b).union(c).cardinality());
        System.out.println("The difference of a from t4 should be 4,6,5,7. Contains " + a.diff(t4).toString());
        System.out.println("a.remove(1) should be 2,3. Returns " + a.remove(1));
        System.out.println("t4.member(7) should return true. Returns " + t4.member(7));
        System.out.println("a.member(7) should return false. Returns " + a.member(7));
        
        //Property Tests
        
        FiniteSet FSet1 = randomFiniteSet(10);
        FiniteSet FSet2 = randomFiniteSet(10);
        int x = (int) Math.random()*100;
        int y = (int) Math.random()*100;
        
        System.out.println("diffTest(FSet1, FSet2) should return true. Returns " + diffTest(FSet1, FSet2));
        System.out.println("unionTest(FSet1, FSet2) should return true. Returns " + unionTest(FSet1, FSet2));
        System.out.println("FSet1.union(FSet2).cardinality() = " + FSet1.union(FSet2).cardinality());
        System.out.println("FSet1.cardinality() = " + FSet1.cardinality());
        System.out.println("FSet2.cardinality() = " + FSet2.cardinality());
        System.out.println("FSet1.inter(FSet2).cardinality() = " + FSet1.inter(FSet2).cardinality());
        System.out.println("addMemberTest(FSet1,(int) Math.random()*100,(int) Math.random()*100) should return true. Returns " + addMemberTest(FSet1, x, y));
        System.out.println("unionMemberTest(FSet1, FSet2,(int) Math.random()*100) should return true. Returns " + unionMemberTest(FSet1, FSet2, x));
        System.out.println("interMemberTest(FSet1, FSet2,(int) Math.random()*100) should return true. Returns " + interMemberTest(FSet1, FSet2, y));
        System.out.println("removeTest(FSet1, (int) Math.random()*100) should return true. Returns " + removeTest(FSet1, x));
        
        for (int i=0; i<50; i++) {
            FiniteSet Set3 = randomFiniteSet(30);
            FiniteSet Set4 = randomFiniteSet(40);
            if (!unionTest(Set3, Set4)) {
                System.out.println("unionTest( " + Set3 + ", " + Set4 + " failed");
            }
        }
        
        for (int i=0; i<50; i++) {
            FiniteSet Set5 = randomFiniteSet(30);
            FiniteSet Set6 = randomFiniteSet(40);
            if (!diffTest(Set5, Set6)) {
                System.out.println("diffTest( " + Set5 + ", " + Set6 + " failed");
            }
        }
}
